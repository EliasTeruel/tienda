Frontend (React) ‚Üí Firebase Hosting + Firebase Auth
                   ‚Üì
Backend (FastAPI - Python) ‚Üí Railway o Render
                             ‚Üì
PostgreSQL (Neon.tech)
                             ‚Üì
Im√°genes (Cloudinary)

------------------------------------------------------------------
Para clonar el repositorio y que funcione en otra computadora, sigue estos pasos:

Clonar el repositorio: Abre la terminal y ejecuta:

git clone <URL_DEL_REPOSITORIO>
cd <nombre_del_repositorio>

Crear y activar un entorno virtual (recomendado):

python -m venv venv
venv\Scripts\activate

Instalar las dependencias: Si tienes un archivo requirements.txt, ejecuta:

pip install -r requirements.txt

Configurar variables de entorno:

Renombra .env.example a .env. (NO HACE FALTA ESTA PARTE)
Completa los valores necesarios (Cloudinary, DATABASE_URL, etc.).
Inicializar la base de datos: Ejecuta el script de inicializaci√≥n:

python tienda/fastapi_tienda/app/scripts/init_db.py (NO HACE FALTA ESTA PARTE)

Ejecutar el servidor FastAPI:

uvicorn app.main:app --reload


Notas:

Instala Python y pip si no los tienes.
Instala uvicorn si no est√°: pip install uvicorn.
Instala las librer√≠as necesarias (FastAPI, SQLAlchemy, cloudinary, etc.).

------------------------------------------------------------------
1. Configurar tu Backend (FastAPI)

python -m venv env
source env/bin/activate  # Windows: .\env\Scripts\activate
pip install fastapi uvicorn python-dotenv psycopg2-binary


nueva estructura:
fastapi_tienda/
‚îÇ
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ main.py               # Punto de entrada de la app
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py             # Configuraci√≥n (Cloudinary, CORS, variables de entorno)
‚îÇ   ‚îú‚îÄ‚îÄ crud.py             
‚îÇ   ‚îú‚îÄ‚îÄ models.py             # Modelos Pydantic
‚îÇ   ‚îú‚îÄ‚îÄ database.py           # Simulaci√≥n o conexi√≥n a base de datos
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ productos.py      # Rutas de productos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ imagenes.py       # Rutas de subida de im√°genes
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îú‚îÄ‚îÄ cloudinary_service.py  # L√≥gica de subida de im√°genes
‚îÇ
‚îú‚îÄ‚îÄ .env                      # Variables de entorno
‚îú‚îÄ‚îÄ requirements.txt          # Dependencias del proyecto
‚îî‚îÄ‚îÄ README.md


Guardar dependencias:
pip freeze > requirements.txt

------------------------------------------------------------------
 2. Subir Backend a Railway
Railway:
Crear cuenta: https://railway.app

Nuevo proyecto ‚Üí ‚ÄúDeploy from GitHub‚Äù o ‚ÄúStart from scratch‚Äù

Sub√≠s el proyecto a GitHub

Railway detecta main.py y requirements.txt autom√°ticamente

Setea variable PORT = 8000 en Railway

üöÄ El backend quedar√° disponible en https://tuapp.up.railway.app

------------------------------------------------------------------

3. Crear base de datos en Neon
Ir a: https://neon.tech

Crear proyecto ‚Üí copiar cadena de conexi√≥n PostgreSQL

En tu backend, guardar en .env:
DATABASE_URL=postgresql://usuario:password@host.db.neon.tech:5432/dbname


se crea tabla con el script init_db.py que para que funcione se debe instalar:

pip install sqlalchemy psycopg2-binary
python scripts/init_db.py

Esto:

Crea la tabla productos si no existe.

Inserta dos productos de ejemplo.



------------------------------------------------------------------

------------------------------------------------------------------
4. Configurar Cloudinary (para im√°genes)
Ir a: https://cloudinary.com

Crear cuenta y copiar datos del dashboard:

CLOUD_NAME

API_KEY

API_SECRET

Guardar en .env del backend
CLOUDINARY_CLOUD_NAME=...
CLOUDINARY_API_KEY=...
CLOUDINARY_API_SECRET=...


------------------------------------------------------------------
Us√°s cloudinary SDK en Python:

pip install cloudinary


------------------------------------------------------------------

5. Crear el Frontend en React
npx create-react-app mi-tienda-frontend
cd mi-tienda-frontend
npm install firebase axios react-router-dom
------------------------------------------------------------------
Configurar Firebase:
Ir a: https://console.firebase.google.com

Crear proyecto ‚Üí activar Authentication ‚Üí elegir ‚ÄúEmail/Password‚Äù o ‚ÄúGoogle‚Äù

Activar Hosting ‚Üí te dar√° un dominio mi-tienda.web.app

Agregar Firebase al React:
// src/firebase.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "...",
  authDomain: "...",
  projectId: "...",
  appId: "...",
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);


------------------------------------------------------------------
6. Conectar frontend con backend
Us√°s axios desde React para llamar a https://tu-backend.up.railway.app/productos

Manej√°s tokens de login desde Firebase para validar en tu API si quer√©s proteger endpoints


------------------------------------------------------------------
7. Subir el frontend a Firebase Hosting

npm install -g firebase-tools
firebase login
firebase init hosting
# Seleccion√°s el proyecto y como carpeta `build/`
npm run build
firebase deploy


------------------------------------------------------------------



------------------------------------------------------------------




------------------------------------------------------------------




------------------------------------------------------------------



------------------------------------------------------------------




------------------------------------------------------------------



------------------------------------------------------------------

































