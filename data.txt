Frontend (React) ‚Üí Firebase Hosting + Firebase Auth
                   ‚Üì
Backend (FastAPI - Python) ‚Üí Railway o Render
                             ‚Üì
PostgreSQL (Neon.tech)
                             ‚Üì
Im√°genes (Cloudinary)

------------------------------------------------------------------
1. Configurar tu Backend (FastAPI)
A. Crear proyecto backend local:
mkdir mi-tienda-backend
cd mi-tienda-backend
python -m venv env
source env/bin/activate  # Windows: .\env\Scripts\activate
pip install fastapi uvicorn python-dotenv psycopg2-binary

B. Estructura inicial:
mi-tienda-backend/
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ models.py
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îî‚îÄ‚îÄ productos.py
‚îú‚îÄ‚îÄ .env
‚îî‚îÄ‚îÄ requirements.txt

C. C√≥digo base main.py:
from fastapi import FastAPI
from routes import productos

app = FastAPI()

app.include_router(productos.router, prefix="/productos")


D. Crear routes/productos.py:
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def get_productos():
    return [{"id": 1, "nombre": "Producto demo"}]



E. Guardar dependencias:
pip freeze > requirements.txt

------------------------------------------------------------------
 2. Subir Backend a Railway o Render
Railway (m√°s simple):
Crear cuenta: https://railway.app

Nuevo proyecto ‚Üí ‚ÄúDeploy from GitHub‚Äù o ‚ÄúStart from scratch‚Äù

Sub√≠s el proyecto a GitHub

Railway detecta main.py y requirements.txt autom√°ticamente

Setea variable PORT = 8000 en Railway

üöÄ El backend quedar√° disponible en https://tuapp.up.railway.app

------------------------------------------------------------------

3. Crear base de datos en Neon
Ir a: https://neon.tech

Crear proyecto ‚Üí copiar cadena de conexi√≥n PostgreSQL

En tu backend, guardar en .env:
DATABASE_URL=postgresql://usuario:password@host.db.neon.tech:5432/dbname


------------------------------------------------------------------

Usar en tu backend con psycopg2 o SQLAlchemy (puedo ayudarte con eso luego).


------------------------------------------------------------------
4. Configurar Cloudinary (para im√°genes)
Ir a: https://cloudinary.com

Crear cuenta y copiar datos del dashboard:

CLOUD_NAME

API_KEY

API_SECRET

Guardar en .env del backend
CLOUDINARY_CLOUD_NAME=...
CLOUDINARY_API_KEY=...
CLOUDINARY_API_SECRET=...


------------------------------------------------------------------
Us√°s cloudinary SDK en Python:

pip install cloudinary


------------------------------------------------------------------

5. Crear el Frontend en React
npx create-react-app mi-tienda-frontend
cd mi-tienda-frontend
npm install firebase axios react-router-dom
------------------------------------------------------------------
Configurar Firebase:
Ir a: https://console.firebase.google.com

Crear proyecto ‚Üí activar Authentication ‚Üí elegir ‚ÄúEmail/Password‚Äù o ‚ÄúGoogle‚Äù

Activar Hosting ‚Üí te dar√° un dominio mi-tienda.web.app

Agregar Firebase al React:
// src/firebase.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "...",
  authDomain: "...",
  projectId: "...",
  appId: "...",
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);


------------------------------------------------------------------
6. Conectar frontend con backend
Us√°s axios desde React para llamar a https://tu-backend.up.railway.app/productos

Manej√°s tokens de login desde Firebase para validar en tu API si quer√©s proteger endpoints


------------------------------------------------------------------
7. Subir el frontend a Firebase Hosting

npm install -g firebase-tools
firebase login
firebase init hosting
# Seleccion√°s el proyecto y como carpeta `build/`
npm run build
firebase deploy


------------------------------------------------------------------



------------------------------------------------------------------




------------------------------------------------------------------




------------------------------------------------------------------



------------------------------------------------------------------




------------------------------------------------------------------



------------------------------------------------------------------

































